public class Solution {
    private int[] _prices;

    private int F(int dayIndex, int boughtPrice, int trCount) {
        if (dayIndex == _prices.Length || trCount == 4) {
            return 0;
        }

        // ничего не куплено, можем либо купить, либо не купить
        if (boughtPrice == -1) {
            // купили
            var a = F(dayIndex+1, _prices[dayIndex], trCount + 1) - _prices[dayIndex];
            // не купили
            var b = F(dayIndex+1, boughtPrice, trCount);
            return Math.Max(a, b);
        }
        else {
            // можем продать и купить
            int a = int.MinValue;
            if (trCount < 3) {
                a = F(dayIndex+1, _prices[dayIndex], trCount + 2) + _prices[dayIndex] - _prices[dayIndex];
            }
            var b = F(dayIndex+1, -1, trCount + 1) + _prices[dayIndex];
            var c = F(dayIndex+1, boughtPrice, trCount);

            return Math.Max(Math.Max(a,b), c);
        }
    }

    public int MaxProfit(int[] prices) {
        
        var bought = new (int sum, int tr)[prices.Length + 1];
        var notBought = new (int sum, int tr)[prices.Length + 1];

        bought[0] = (int.MinValue, 0);
        notBought[0] = (0,0);
        
        for (int i = 1; i <= prices.Length; i++) {
            var price = prices[i-1];
            
            if (notBought[i - 1].tr < 4 && notBought[i-1].sum - price > bought[i-1].sum)
            {
                bought[i] = (notBought[i - 1].sum - price, notBought[i - 1].tr + 1);
            }
            else
            {
                bought[i] = bought[i - 1];
            }

            if (bought[i - 1].tr < 4 && bought[i - 1].sum + price > notBought[i - 1].sum)
            {
                notBought[i] = (bought[i - 1].sum + price, bought[i - 1].tr + 1);
            }
            else
            {
                notBought[i] = notBought[i - 1];
            }
            
        }

        return Math.Max(notBought.Last().sum, bought.Last().sum);
    }
}